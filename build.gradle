buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
		mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.102'
    }
}

plugins {
//    id "com.matthewprenger.cursegradle" version "1.0.7"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

group = "com.enderio.core"
archivesBaseName = "EnderCore"
version = "${minecraft_version}-${mod_version}.${buildnumber}"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

boolean dev = System.getenv("RELEASE") == null || System.getenv("RELEASE").equalsIgnoreCase("false")

def type = 'alpha'
if (project.hasProperty('mod_appendix')) {
    version += "-${project.mod_appendix}"
	type = project.mod_appendix
}

minecraft {
    mappings channel: 'snapshot', version: '20190321-1.13.2'
    
    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version
}

configurations {
    compile.extendsFrom exportedCompile
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            exclude '**/enderio/trigger/**'
        }
        resources {
            srcDir 'resources'
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion': minecraft_version
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}

/*
// Add external annotations
eclipse.classpath.file {
    withXml {
        def node = it.asNode()
        node.get('classpathentry').each {
            // Allow external annotations on Minecraft/Forge and JRE
            if (it.attribute('path').contains('forgeSrc') || it.attribute('path').contains('JRE_CONTAINER')) {
                it.appendNode('attributes').appendNode('attribute', [name: 'annotationpath', value: '/'+rootProject.name+'/externalannotations/'])
            }
        }
    }
}
*/

task coreJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/enderio/core/common/transform/**'
    }
    manifest {
        attributes 'FMLCorePlugin': "com.enderio.core.common.transform.EnderCorePlugin"
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:core"
    }
    classifier 'core'
}

reobf {
    coreJar
}

jar {
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'com/enderio/core/common/transform/**'
    from(coreJar.archivePath.absolutePath) {
        include '*'
        into ("META-INF/libraries")
    }
    manifest {
        attributes(["Specification-Title": "blur",
                    "Specification-Vendor": "tterrag",
                    "Specification-Version": "25.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"tterrag",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'ContainedDeps': coreJar.archivePath.name],)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
	include 'crazypants/enderio/api/**/*'
    classifier = 'api'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

build.dependsOn apiJar, deobfJar, javadoc

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact deobfJar
            artifact apiJar
            artifact coreJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        } else {
            mavenLocal()
        }
    }
}

task checkTranslations << {
    Map<String, String> mapen = new HashMap<String, String>()
    (new File('resources/assets/endercore/lang/en_US.lang')).eachLine {
        def (value1, value2) = it.tokenize( '=' )
        if (value1 == null || value2 == null) {return}
        mapen.put(value1, value2)
    }
    
    new File('resources/assets/endercore/lang/').eachFileMatch( ~".*\\.lang\$" ) { langfile ->
        if (!langfile.getName().contains("en_US")) {
	        Map<String, String> map = new HashMap<String, String>()
	        File outfile = new File("${langfile}.txt")
	        Writer outwriter = outfile.newWriter("UTF8")
	        outwriter.write("\n// Additional translations:\n")
	        outwriter << langfile.filterLine {
	            def (value1, value2) = it.tokenize( '=' )
	            if (value1 == null || value2 == null) {return false}
	            map.put(value1, value2)
	            return !mapen.containsKey(value1)
	        }
	        
	        outwriter.append("\n// Missing translations:\n")
	        for (e in mapen) {
	            if (!map.containsKey(e.key)) {
	                outwriter.append(e.key + "=" + e.value + "\n")
	            }
	        }
        println "Created translation report ${outfile}"
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${archivesBaseName} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

String getCN() {
    def firsts = ['Donald', 'Lex', 'Mike', 'Arthur', 'Bridget', 'Dorian', 'Ford', 'Guy', 'James', 'Jessica', 'John', 'Michael', 'Robinson', 'Zaphod', 'Bell', 'Penelope']
    def lasts = ['Duck', 'Luthor', 'Meyers', 'Dent', 'Jones', 'Gray', 'Prefect', 'Montag', 'Moriarty', 'Rabbit', 'Watson', 'Smith', 'Corleone', 'Crusoe', 'Beeblebrox', 'Cranel', 'Akk']
    def rand = new Random()
    return firsts[rand.nextInt(firsts.size())] + ' ' + lasts[rand.nextInt(lasts.size())]
}
/*
task mkKeyStore(type:Exec) {
   workingDir projectDir
   commandLine 'keytool', '-genkey', '-alias', 'signFiles', '-keystore', 'ecstore.jks', '-storepass', '123456', '-noprompt', '-dname', 'CN='+getCN(), '-keypass', '123456'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    inputFile = jar.archivePath
    outputFile = jar.archivePath
    keyStore = 'ecstore.jks'
    alias = 'signFiles'
    storePass = '123456'
    keyPass = '123456'
}

task signCoreJar(type: SignJar, dependsOn: reobfCoreJar) {
    inputFile = coreJar.archivePath
    outputFile = coreJar.archivePath
    keyStore = 'ecstore.jks'
    alias = 'signFiles'
    storePass = '123456'
    keyPass = '123456'
}

task rmKeyStore(type: Delete) {
  delete 'ecstore.jks'
}

build.dependsOn rmKeyStore
rmKeyStore.dependsOn signJar
signJar.dependsOn mkKeyStore
signCoreJar.dependsOn mkKeyStore
jar.dependsOn signCoreJar
*/
/*
tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')
    
curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = type
        mainArtifact(jar) {
            displayName = "${archivesBaseName} - ${version}"
        }
        addArtifact(apiJar)
    }
}
*/